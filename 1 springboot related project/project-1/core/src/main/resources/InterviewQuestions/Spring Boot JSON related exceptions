********************************************************************************************************************************************************************

1. HttpMessageNotReadableException: JSON parse error
(Malformed JSON)

‚ùå Invalid JSON

{
    "name": "John",
    "age": 25,   // ‚ùå Trailing comma
}


‚úÖ Correct JSON

{
    "name": "John",
    "age": 25
}


üîπ Cause:

The trailing comma after 25 is not allowed in JSON.
üîπ Solution:

Remove the trailing comma from the last key-value pair.


********************************************************************************************************************************************************************


2. HttpMessageNotReadableException: Cannot deserialize value of type (Wrong Data Type)

‚ùå Invalid JSON (Wrong Data Type)

{
    "name": "John",
    "age": "twenty-five"  // ‚ùå Age should be a number, but it's a string
}

‚úÖ Correct JSON

{
    "name": "John",
    "age": 25
}


üîπ Cause:

The age field is expected to be a number, but a string ("twenty-five") was provided.
üîπ Solution:

Ensure that age is sent as a number (without quotes).

********************************************************************************************************************************************************************


3. HttpMessageNotReadableException: Unexpected character (Incorrect Boolean Value)
‚ùå Invalid JSON (Incorrect Boolean)

{
    "name": "John",
    "isActive": Yes  // ‚ùå "Yes" is not a valid JSON boolean
}

‚úÖ Correct JSON

{
    "name": "John",
    "isActive": true
}

üîπ Cause:

JSON booleans must be true or false (not "Yes" or "No").
üîπ Solution:

Use true or false (without quotes).

********************************************************************************************************************************************************************


4. HttpMessageNotReadableException: Unrecognized field (Unknown Property)
‚ùå Invalid JSON (Extra Property)

{
    "name": "John",
    "age": 25,
    "nickname": "Johnny"  // ‚ùå `nickname` is not in the Java class
}

‚úÖ Correct JSON

{
    "name": "John",
    "age": 25
}

üîπ Cause:

The nickname field does not exist in the Java DTO (Data Transfer Object).
üîπ Solution:

Remove the unexpected property or modify the Java class to include it:

@JsonIgnoreProperties(ignoreUnknown = true) // Allows extra fields without breaking
public class User {
    private String name;
    private int age;
}

********************************************************************************************************************************************************************

5. JsonMappingException: Cannot deserialize instance of X
(Sending Array Instead of Object)

‚ùå Invalid JSON (Array Instead of Object)
[
    {
        "name": "John",
        "age": 25
    }
]


‚úÖ Correct JSON (Object Instead of Array)
{
    "name": "John",
    "age": 25
}



üîπ Cause:

The API expects a single object, but an array was sent.
üîπ Solution:

If the API is expecting an object, send an object instead of an array.
Or, if the API expects an array, update the Java class to accept a List<User>.

********************************************************************************************************************************************************************

6. JsonParseException: Unexpected character (Special Characters in JSON)

‚ùå Invalid JSON (Unescaped Quotes)

{
    "message": "John said, "Hello!""  // ‚ùå Inner quotes are not escaped
}

‚úÖ Correct JSON

{
    "message": "John said, \"Hello!\""
}


üîπ Cause:
Double quotes (") inside a string must be escaped with a backslash (\").
üîπ Solution:
Escape quotes using \".

********************************************************************************************************************************************************************


7. JsonMappingException: Cannot deserialize value of type java.util.Date (Invalid Date Format)

‚ùå Invalid JSON (Wrong Date Format)

{
    "name": "John",
    "dateOfBirth": "25-12-1990"  // ‚ùå Incorrect format
}



‚úÖ Correct JSON

{
    "name": "John",
    "dateOfBirth": "1990-12-25"
}


üîπ Cause:

The API expects a specific date format, but a different format was provided.
üîπ Solution:

Use the ISO-8601 format (YYYY-MM-DD).
Or, tell Spring to accept custom formats using @JsonFormat:



import com.fasterxml.jackson.annotation.JsonFormat;
import java.util.Date;

public class User {
    private String name;

    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "dd-MM-yyyy")
    private Date dateOfBirth;
}


**********************************************************************************************************************************************************************


8. HttpMediaTypeNotSupportedException: Content type 'text/plain' not supported

‚ùå Sending Data as Text Instead of JSON
If you send data as plain text instead of JSON, you might get this error.

üî¥ Wrong Request (Plain Text):

POST /users
Content-Type: text/plain

name=John&age=25


‚úÖ Solution
Ensure that the request has the correct Content-Type header:
Content-Type: application/json

‚úî Correct JSON Payload:

{
    "name": "John",
    "age": 25
}

**********************************************************************************************************************************************************************

9. JsonMappingException: Infinite recursion (StackOverflowError)

‚ùå Circular Relationship Between Entities


import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonBackReference;

@Entity
public class Parent {
    @OneToMany(mappedBy = "parent")
    @JsonManagedReference
    private List<Child> children;
}

@Entity
public class Child {
    @ManyToOne
    @JsonBackReference
    private Parent parent;
}


üîπ Cause:

Bidirectional relationships cause infinite recursion during serialization.
üîπ Solution:

Use @JsonManagedReference and @JsonBackReference to break recursion.

**********************************************************************************************************************************************************************



10. JsonParseException: Illegal character (Non-UTF-8 Characters in JSON)
‚ùå Invalid JSON (Encoding Issues)


{
    "name": "J√∂hn",
    "age": 25
}
üîπ Cause:

Some systems expect UTF-8 encoding and fail if special characters (e.g., √∂) are not properly encoded.
üîπ Solution:

Ensure that the API expects UTF-8 encoding.
In Spring Boot, enforce UTF-8 in application.properties:

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true



Summary of JSON Errors

Error	Cause	Solution

Trailing Comma Error	                    Extra comma at end                              Remove the trailing comma
Wrong Data Type                             "age": "twenty-five" instead of number          Ensure correct data type
Invalid Boolean                             "Yes" instead of true                           Use true or false
Unrecognized Field                          Sending unknown property                        Use @JsonIgnoreProperties(ignoreUnknown = true)
Array Instead of Object                     Sending [] instead of {}                        Match expected structure
Special Characters Issue	                Unescaped quotes (")	                        Use \" inside strings
Invalid Date Format	                        Wrong format like 25-12-1990	                Use ISO-8601 or @JsonFormat
Incorrect Content-Type	                    Sending text instead of JSON	                Set Content-Type: application/json
Circular Relationship	                    Parent-child infinite loop	                    Use @JsonManagedReference and @JsonBackReference


































