We will take order and address entity to perform one-to-one mapping.

Each order has exactly 1 address and each address belongs to 1 order.

we use @oneToOne mapping annotation

order is source entity
address is target entity.


@OneToOne mapping can be unidirectional or bidirectional

In Unidirectional association, Source entity has a relationship field that refers to the target
entity and the source entity's table contains the foreign key.

In bidirectional association, each entity has a relationship field that refers to
each other and the target entity's table contains the foreign key.
The Source entity must use the mappedBy attribute to define the bidirectional one-to-one mapping.




UNIDIRECTIONAL   -> SRC TBL CONTAINS FOREIGN KEY
BIDIRECTIONAL -> TARGET ENTITY CONTAINS FOREIGN KEY  SRC ENTITY HAS TO USE MAPPEDBY ATTRIBUTE

UNIDIRECTIONAL: If we load order entity,then we can get associated  billing address  using unidirectional mapping  but vice versa is not possible



PRODUCT ENTITY AND PRODUCT REPOSITORY IS ALREADY AVAILABLE

CASCADING EXAMPLES:

    when we delete order entity, billing address entity should also get deleted.

    ORDERS AND ORDERITEMS RELATIONSHIP:
    CASCADING IS THE WAY TO ACHIEVE THIS. WHEN WE PERFORM SOME ACTION ON THE TARGET ENTITY,
    SAME ACTION WILL BE APPLIED ON THE ASSOCIATED ENTITY



CascadeType.PERSIST -> save or persist operation cascade to related entities
CascadeType.MERGE ->related entities are merged when the owning entity is merged
CascadeType.REFRESH ->related entities are refreshed when the owning entity is refreshed
CascadeType.REMOVE ->related entities are removed when the owning entity is removedCascadeType.REMOVE
CascadeType.DETACH ->related entities are detached if a manual detach occurs
CascadeType.ALL ->all cascade types are applied


CRUD OPERATIONS:

WHENEVER WE SAVE THE ORDER, ADDRESS ENTITY WILL GET LOADED FIRST AND THEN ORDER ENTITY WILL GET SAVED

Hibernate:
    insert
    into
        address
        (city, country, state, street, zip_code)
    values
        (?, ?, ?, ?, ?)
Hibernate:
    insert
    into
        oders
        (billing_address_id, date_created, last_updated, order_tracking_number, status, total_price, total_quantity)
    values
        (?, ?, ?, ?, ?, ?, ?)


********************************************************************************************************************************************
**UPDATE OPERATION:
********************************************************************************************************************************************


Hibernate:
    select         o1_0.id,        ba1_0.id,        ba1_0.city,        ba1_0.country,        ba1_0.state,        ba1_0.street,
        ba1_0.zip_code,        o1_0.date_created,        o1_0.last_updated,        o1_0.order_tracking_number,        o1_0.status,
        o1_0.total_price,        o1_0.total_quantity     from        oders o1_0    left join        address ba1_0             on ba1_0.id=o1_0.billing_address_id
    where        o1_0.id=?

Hibernate:
    select          o1_0.id,        ba1_0.id,        ba1_0.city,        ba1_0.country,        ba1_0.state,
        ba1_0.street,        ba1_0.zip_code,        o1_0.date_created,        o1_0.last_updated,        o1_0.order_tracking_number,
        o1_0.status,        o1_0.total_price,        o1_0.total_quantity    from        oders o1_0    left join
        address ba1_0            on ba1_0.id=o1_0.billing_address_id    where        o1_0.id=?

Hibernate:
    update address set  city=?,  country=?, state=?,street=?,  zip_code=?  where  id=?

Hibernate:
    update  oders set  billing_address_id=?,date_created=?,last_updated=?,order_tracking_number=?, status=?, total_price=?,total_quantity=? where id=?


********************************************************************************************************************************************
** READ OPERATION:
********************************************************************************************************************************************












********************************************************************************************************************************************
**DELETE OPERATION:
********************************************************************************************************************************************
Hibernate:
    select o1_0.id,ba1_0.id,
        ba1_0.city,ba1_0.country,ba1_0.state,ba1_0.street, ba1_0.zip_code, o1_0.date_created,o1_0.last_updated,
        o1_0.order_tracking_number,o1_0.status, o1_0.total_price, o1_0.total_quantity
    from oders o1_0 left join address ba1_0 on ba1_0.id=o1_0.billing_address_id where o1_0.id=?

Hibernate:
    delete from oders where id=?
Hibernate:
    delete from address where id=?
